# PE012 Highly divisible triangular number


# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


def divisible_triangular(num_divisor):
    """return the value of the first triangle number to have over n divisors"""

    def genTriangular():
        """create a generator to make triangle numbers"""
        n = 1
        while True:
            yield (1 + n) * n // 2
            n += 1

    def count_divisor(n):
        """count the number of divsors of a number"""
        count = 0
        for div in range(1, int(n ** 0.5)):
            if n % div == 0:
                count += 2
        if round(n ** 0.5) == n ** 0.5:
            count += 1
        return count

    triangular = genTriangular()
    t_num = next(triangular)
    while count_divisor(t_num) < num_divisor:
        t_num = next(triangular)

    return t_num


if __name__ == "__main__":
    assert divisible_triangular(6) == 28, "regular"
    print(divisible_triangular(500))
    # >>> 76576500
    # passed
